import jss from './style.module.less';

//https://medium.com/@pppped/how-to-code-a-responsive-circular-percentage-chart-with-svg-and-css-3632f8cd7705

const styleTypes = {
  '3/4BR': {rail: {strokeDasharray: '75, 100'}, rotate: 180},
  'default': {rail: {strokeDasharray: '100, 100'}},
};

const round = (n, d = 1) => Math.round(n * Math.pow(10, d)) / Math.pow(10, d);

const BASE_SIZE = 100;
const RADIUS = round(BASE_SIZE / (3.14159 * 2), 4);
const DIAMETER = RADIUS * 2;

const CirclePath = ({cssName = '', size, width, ...rest}) => {

  const x = size / 2;
  const y = round((size - DIAMETER) / 2, 4);

  return (
    <path className={[jss.isCircle, cssName].join(' ')}
          d={`M${x} ${y}
              a ${RADIUS} ${RADIUS} 0 0 1 0 ${DIAMETER}
              a ${RADIUS} ${RADIUS} 0 0 1 0 -${DIAMETER}`}
          fill="transparent"
          strokeWidth={width}
          {...rest}
    />);
};


const CircularProgressBar = ({className = '', size, width, value, children, type}) => {
  const maxTrackValue = Math.min(100, Math.max(0, value));
  const rootCss = ['component is-circular-progress-bar', jss.base, className].join(' ');

  const {rotate, ...styleType} = styleTypes[type] || styleTypes.default;

  const cssVars = {
    '--size': `${size}px`,
    '--rotate': `${rotate}deg`
  };

  const borderWidth = (width / size) * DIAMETER;
  const circleSize = DIAMETER + borderWidth;

  return (
    <div className={rootCss} style={cssVars}>
      <div className={`${jss.isBox} is-box`}>
        <svg className="is-svg" viewBox={`0 0 ${circleSize} ${circleSize}`}>
          <CirclePath size={circleSize} width={borderWidth}
                      cssName={[jss.isRail, 'is-rail'].join(' ')}
                      {...styleType.rail}/>
          {maxTrackValue > 0 && <CirclePath key={value} size={circleSize} width={borderWidth}
                       cssName={[jss.isTrack, 'is-track'].join(' ')}
                       strokeDasharray={`${maxTrackValue}, 100`}
          />}
        </svg>
      </div>
      {children && <div className={`${jss.isChildrenArea}`}>
        <div className={`${jss.isChildrenAreaBox}`}>
          {children}
        </div>
      </div>}
    </div>
  );
};

export default CircularProgressBar;

.base {
  position: relative;
  display: flex;
  width: var(--size, 100%);
  height: var(--size, 100%);
  .isChildrenArea {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;

    .isChildrenAreaBox {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      width: 100%;
      flex-direction: column;
    }
  }

  .isBox {
    transform: rotate(var(--rotate,0deg));
    width: 100%;
    height: 100%;
  }

  svg {
    fill: #fff;
    .isCircle {
      fill: transparent;
      stroke-linecap: round;
      &.isRail {
        stroke: #d5d5d5;
      }
      &.isTrack {
        stroke: #000;
        animation: progress 1s ease-out forwards;
      }
      @keyframes progress {
        0% {
          stroke-dasharray: 0 100;
        }
      }
    }
  }
}

